# -*- coding: utf-8 -*-
"""PresupuestoTI/BI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rsiPr7OBxjGvC4Arbe-SLVCcWspnzIRK
"""

!pip install dash plotly

"""HOLA"""

import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd

# Datos
data = {
    "Mes": ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
    "Presupuestado": [29414611, 10845000, 6000000, 117262415.30, 130795582, 347913945.01, 225572171.85, 113287273, 86511940, 90991940, 96511940, 86511940],
    "Ejecutado": [11202300, 63799054, 5397793, 105677739, 82886299, 81270243, 75774586, 131302101, None, None, None, None]
}

df = pd.DataFrame(data)

# Filtrar los datos hasta septiembre
df_septiembre = df.loc[df['Mes'].isin(["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre"])]

# Crear la aplicación Dash
app = dash.Dash(__name__)

# Diseño del dashboard
app.layout = html.Div([
    html.Div([
        html.H1('Comparación de Gasto Ejecutado vs. Presupuestado',
                style={'color': 'white', 'text-align': 'center', 'font-family': 'Arial, sans-serif',
                       'background': 'linear-gradient(to right, #001f3f, #0074CC)',
                       '-webkit-background-clip': 'text',
                       '-webkit-text-fill-color': 'transparent',
                       'padding': '20px'}),
    ], style={'text-align': 'center'}),
    dcc.Graph(id='bar-chart'),
    html.Div([
        html.Div([
            html.H3('Presupuestado', style={'text-align': 'center'}),
            html.H4(f'Acumulado (Hasta Septiembre): {df_septiembre["Presupuestado"].sum():,.2f}', style={'background-color': '#283c8e', 'color': 'white', 'text-align': 'center', 'padding': '10px'})
        ], className='box'),
        html.Div([
            html.H3('Ejecutado', style={'text-align': 'center'}),
            html.H4(f'Acumulado (Hasta Septiembre): {df_septiembre["Ejecutado"].sum():,.2f}', style={'background-color': 'green', 'color': 'white', 'text-align': 'center', 'padding': '10px'})
        ], className='box')
    ], className='box-container'),
    html.A('Abrir en pantalla completa', href='javascript:void(0);', id='fullscreen-button', target='_blank', style={'color': 'white', 'background-color': '#333', 'padding': '10px', 'border-radius': '10px', 'text-align': 'center', 'margin-top': '20px', 'display': 'block', 'font-family': 'Arial, sans-serif'})
])

# Callback para abrir en pantalla completa
@app.callback(
    Output('fullscreen-button', 'href'),
    Input('fullscreen-button', 'n_clicks')
)
def open_in_fullscreen(n_clicks):
    if n_clicks is not None and n_clicks > 0:
        return 'URL_DE_LA_PAGINA_DE_VISUALIZACION_COMPLETA'

# Callback para actualizar el gráfico
@app.callback(
    Output('bar-chart', 'figure'),
    Input('bar-chart', 'relayoutData')
)
def update_bar_chart(relayoutData):
    # Colores personalizados para las barras
    colors = ['royalblue', 'limegreen']

    fig = px.bar(df, x='Mes', y=['Presupuestado', 'Ejecutado'], title='Comparación de Gasto Ejecutado vs. Presupuestado', labels={'value': 'Monto'}, height=500, color_discrete_sequence=colors)
    fig.update_layout(barmode='group')

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)